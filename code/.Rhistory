cat(paste0('MATCH (a:Actor)-[]-(d:Document)-[]-(a:Actor)
WHERE a.actor_id IN ["', temp_actors, '"] AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a, d'))
temp_actors <- paste0(actors$actor_id[which(actors$community == "2")], collapse = '", "')
temp_estc <- com_1641-`com_1641-1650_2`
start_year <- str_extract(era, "^\\d\\d\\d\\d")
library(stringr)
temp_estc <- com_1641-`com_1641-1650_2`
start_year <- str_extract(era, "^\\d\\d\\d\\d")
end_year <- str_extract(era, "\\d\\d\\d\\d$")
cat(paste0('MATCH (a:Actor)-[]-(d:Document)-[]-(a:Actor)
WHERE a.actor_id IN ["', temp_actors, '"] AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a, d'))
cat(paste0('MATCH (a1:Actor)-[]-(d:Document)-[]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city IS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a, d'))
library(neo4r)
library(igraph)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = "1234"
)
get_igraph_from_neo4j <- function(G) {
#remove mutil-birth/death years and collapse arrays
nodes <- length(G$nodes$properties)
for (i_node in 1:nodes) {
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")])[[1]]
to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
if(length(to_collapse) == 0) { next }
G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
}
# #collapse arrays
# nodes <- length(G$nodes$properties)
# for (i_node in 1:nodes) {
#   to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
#   if(length(to_collapse) == 0) { next }
#   G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
# }
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties") %>%
# We're extracting the first label of each node, but
# this column can also be removed if not needed
mutate(label = map_chr(label, 1))
#G$nodes$label <- ifelse(is.na(G$nodes$name), str_trunc(G$nodes$title, 20, "right"), str_trunc(G$nodes$name, 20, "right"))
G$relationships <- G$relationships %>%
unnest_relationships() %>%
dplyr::select(startNode, endNode, type, everything())
graph_object <- igraph::graph_from_data_frame(
d = G$relationships,
directed = TRUE,
vertices = G$nodes
)
#Lables and colours
V(graph_object)$color[which(V(graph_object)$label == "Actor")] <- "yellow"
V(graph_object)$type[which(V(graph_object)$label == "Actor")] <- "Actor"
V(graph_object)$label[which(V(graph_object)$label == "Actor")] <- names(V(graph_object)[which(V(graph_object)$label == "Actor")])
V(graph_object)$color[which(V(graph_object)$label == "Document")] <- "green"
V(graph_object)$type[which(V(graph_object)$label == "Document")] <- "Document"
V(graph_object)$label[which(V(graph_object)$label == "Document")] <- stringr::str_trunc(V(graph_object)$title[which(V(graph_object)$label == "Document")], 20)
V(graph_object)$color[which(V(graph_object)$label == "Work")] <- "orange"
V(graph_object)$type[which(V(graph_object)$label == "Work")] <- "Work"
V(graph_object)$label[which(V(graph_object)$label == "Work")] <- stringr::str_trunc(V(graph_object)$work_id[which(V(graph_object)$label == "Work")], 20)
return(graph_object)
}
g <- paste0('MATCH (a1:Actor)-[]-(d:Document)-[]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city CONTAINS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a1, a2, d') %>%
call_neo4j(con, type = "graph")
plot(g)
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
library(stringr)
library(neo4r)
library(igraph)
library(ggplot2)
library(ggalluvial)
library(dplyr)
library(purrr)
library(igraph)
library(stringr)
library(RColorBrewer)
library(neo4r)
library(ggplot2)
library(ggalluvial)
library(tibble)
library(PGRdup)
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
get_igraph_from_neo4j <- function(G) {
#remove mutil-birth/death years and collapse arrays
nodes <- length(G$nodes$properties)
for (i_node in 1:nodes) {
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")])[[1]]
to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
if(length(to_collapse) == 0) { next }
G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
}
#collapse arrays
nodes <- length(G$nodes$properties)
for (i_node in 1:nodes) {
to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
if(length(to_collapse) == 0) { next }
G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
}
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties") %>%
# We're extracting the first label of each node, but
# this column can also be removed if not needed
mutate(label = map_chr(label, 1))
#G$nodes$label <- ifelse(is.na(G$nodes$name), str_trunc(G$nodes$title, 20, "right"), str_trunc(G$nodes$name, 20, "right"))
G$relationships <- G$relationships %>%
unnest_relationships() %>%
dplyr::select(startNode, endNode, type, everything())
graph_object <- igraph::graph_from_data_frame(
d = G$relationships,
directed = TRUE,
vertices = G$nodes
)
#Lables and colours
V(graph_object)$color[which(V(graph_object)$label == "Actor")] <- "yellow"
V(graph_object)$type[which(V(graph_object)$label == "Actor")] <- "Actor"
V(graph_object)$label[which(V(graph_object)$label == "Actor")] <- names(V(graph_object)[which(V(graph_object)$label == "Actor")])
V(graph_object)$color[which(V(graph_object)$label == "Document")] <- "green"
V(graph_object)$type[which(V(graph_object)$label == "Document")] <- "Document"
V(graph_object)$label[which(V(graph_object)$label == "Document")] <- stringr::str_trunc(V(graph_object)$title[which(V(graph_object)$label == "Document")], 20)
V(graph_object)$color[which(V(graph_object)$label == "Work")] <- "orange"
V(graph_object)$type[which(V(graph_object)$label == "Work")] <- "Work"
V(graph_object)$label[which(V(graph_object)$label == "Work")] <- stringr::str_trunc(V(graph_object)$work_id[which(V(graph_object)$label == "Work")], 20)
return(graph_object)
}
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
g$nodes$properties
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
nodes <- length(G$nodes$properties)
nodes <- length(g$nodes$properties)
length(g$nodes$properties)
g$nodes$properties[1]
g$nodes$properties[[1]]
g$nodes$properties[[2]]
g$nodes$properties[[3]]
g$nodes$properties[[4]]
g$nodes$properties[[5]]
g$nodes$properties[[6]]
length(g$nodes$properties[[6]])
(g$nodes$properties[[6]])
(g$nodes$properties[[61]])
(g$nodes$properties[[600]])
#remove mutil-birth/death years and collapse arrays
nodes <- length(G$nodes$properties)
G <- g
#remove mutil-birth/death years and collapse arrays
nodes <- length(G$nodes$properties)
for (i_node in 1:nodes) {
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")])[[1]]
to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
if(length(to_collapse) == 0) { next }
G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
}
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties") %>%
# We're extracting the first label of each node, but
# this column can also be removed if not needed
mutate(label = map_chr(label, 1))
G$relationships <- G$relationships %>%
unnest_relationships() %>%
dplyr::select(startNode, endNode, type, everything())
G$relationships
dplyr::select(startNode, endNode, type, everything())
g <- paste0('MATCH (a1:Actor)-[]-(d:Document)-[]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city CONTAINS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a1, a2, d') %>%
call_neo4j(con, type = "graph")
g <- paste0('MATCH (a1:Actor)-[]->(d:Document)<-[]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city CONTAINS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a1, a2, d') %>%
call_neo4j(con, type = "graph")
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
g <- paste0('MATCH (a1:Actor)-[rel]-(d:Document)-[rel]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city CONTAINS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a1, a2, d, rel') %>%
call_neo4j(con, type = "graph")
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
g <- paste0('MATCH (a1:Actor)-[rel1]-(d:Document)-[rel2]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city CONTAINS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a1, a2, d, rel1, rel2') %>%
call_neo4j(con, type = "graph")
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
plot(gg)
plot(gg, size = 1)
plot(gg, size = .5)
plot(gg, size = .5, label = NA)
plot(gg, size = .5, label = NA, label.cex = 0)
plot.igraph(gg, size = .5, label = NA, label.cex = 0)
plot.igraph(gg, size = .5, vertex.label = NA, label.cex = 0)
plot.igraph(gg, vertex.size = .5, vertex.label = NA, label.cex = 0)
rm(G)
plot.igraph(gg, vertex.size = .8, vertex.label = NA, label.cex = 0)
textstat_simil(temp_dfm, "monarch")
?textstat_simil
View(actors)
cat(paste0('MATCH (a1:Actor)-[]-(d:Document)-[]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city CONTAINS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a1, a2, d'))
View(actors)
View(actors)
View(actors)
for(i_com in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com])
#check which com it may be
for(i_com_check in 1:length(unique(temp_dfm@docvars$Community)))
if(all(temp_dfm@docvars$estc_id[which(temp_dfm@docvars$Community == paste0("Community_", i_com_check))] %in% temp_com$estc_ids)) {
#assign(paste0("com_", era, "_", i_com_check), temp_com)
cat("\n", i_com, "is", i_com_check)
}
}
View(actors)
cat("\nExtracted data com", i_com, "is", i_com_check, "in DFM")
for(i_com in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com])
#check which com it may be
for(i_com_check in 1:length(unique(temp_dfm@docvars$Community)))
if(all(temp_dfm@docvars$estc_id[which(temp_dfm@docvars$Community == paste0("Community_", i_com_check))] %in% temp_com$estc_ids)) {
#assign(paste0("com_", era, "_", i_com_check), temp_com)
cat("\nExtracted data com", i_com, "is", i_com_check, "in DFM")
}
}
era <- "1751-1760"
temp_dfm <- readRDS(paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/com_dfm_titles/com_dfm_", era, ".rds"))
temp_dfm <- dfm_select(temp_dfm, pattern = c(stopwords("english"), stopwords("french"), stopwords("italian"), stopwords("spanish"), latin_stopwords$a, extra_stopwords), selection = "remove", valuetype = "fixed")
temp_dfm <- dfm_select(temp_dfm, pattern = c("\\d\\d\\d\\d\\d", "\\d\\d\\d\\d", "\\d\\d\\d", "\\d\\d", "\\d"), selection = "remove", valuetype = "regex")
latin_stopwords <- read.csv("../../ESTC_SNA_data_creation/data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
extra_stopwords <- c("shall", "may", "one", "us", "hath", "yet", "upon", "yet", "now", "said", "unto", "thy", "doe", "first", "must",
"much", "made", "many", "make", "also", "without", "can", "thou", "like", "can", "though", "therefore", "without",
"two", "things", "might", "way", "say", "day", "let", "well", "things", "take", "owne", "doth", "i.e", "tis", "page removed",
#THIS IS IMPORTANT!
"non-latin", "alphabet", "saith", "thus", "|", "¦", "⁻", "vol", "year", "printed", "published",
"na", "amp", "ye", "anno", "translated", "vpon", "vnto", "yeere", "haue", "three", "second", "thereof", "yeare", "written", "mr",
"wherein", "written", "esq", "author", "part", "dr", "volumes", "1800", "volume", "mrs", "m.d", "d.d", "b.d")
temp_dfm <- readRDS(paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/com_dfm_titles/com_dfm_", era, ".rds"))
temp_dfm <- dfm_select(temp_dfm, pattern = c(stopwords("english"), stopwords("french"), stopwords("italian"), stopwords("spanish"), latin_stopwords$a, extra_stopwords), selection = "remove", valuetype = "fixed")
temp_dfm <- dfm_select(temp_dfm, pattern = c("\\d\\d\\d\\d\\d", "\\d\\d\\d\\d", "\\d\\d\\d", "\\d\\d", "\\d"), selection = "remove", valuetype = "regex")
latin_stopwords <- read.csv("../../ESTC_SNA_data_creation/data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
#exploring era specific DFMs
setwd("code/")
era <- "1751-1760"
latin_stopwords <- read.csv("../../ESTC_SNA_data_creation/data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
extra_stopwords <- c("shall", "may", "one", "us", "hath", "yet", "upon", "yet", "now", "said", "unto", "thy", "doe", "first", "must",
"much", "made", "many", "make", "also", "without", "can", "thou", "like", "can", "though", "therefore", "without",
"two", "things", "might", "way", "say", "day", "let", "well", "things", "take", "owne", "doth", "i.e", "tis", "page removed",
#THIS IS IMPORTANT!
"non-latin", "alphabet", "saith", "thus", "|", "¦", "⁻", "vol", "year", "printed", "published",
"na", "amp", "ye", "anno", "translated", "vpon", "vnto", "yeere", "haue", "three", "second", "thereof", "yeare", "written", "mr",
"wherein", "written", "esq", "author", "part", "dr", "volumes", "1800", "volume", "mrs", "m.d", "d.d", "b.d")
temp_dfm <- readRDS(paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/com_dfm_titles/com_dfm_", era, ".rds"))
setwd(../)
setwd("../")
latin_stopwords <- read.csv("../ESTC_SNA_data_creation/data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
extra_stopwords <- c("shall", "may", "one", "us", "hath", "yet", "upon", "yet", "now", "said", "unto", "thy", "doe", "first", "must",
"much", "made", "many", "make", "also", "without", "can", "thou", "like", "can", "though", "therefore", "without",
"two", "things", "might", "way", "say", "day", "let", "well", "things", "take", "owne", "doth", "i.e", "tis", "page removed",
#THIS IS IMPORTANT!
"non-latin", "alphabet", "saith", "thus", "|", "¦", "⁻", "vol", "year", "printed", "published",
"na", "amp", "ye", "anno", "translated", "vpon", "vnto", "yeere", "haue", "three", "second", "thereof", "yeare", "written", "mr",
"wherein", "written", "esq", "author", "part", "dr", "volumes", "1800", "volume", "mrs", "m.d", "d.d", "b.d")
temp_dfm <- readRDS(paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/com_dfm_titles/com_dfm_", era, ".rds"))
temp_dfm <- dfm_select(temp_dfm, pattern = c(stopwords("english"), stopwords("french"), stopwords("italian"), stopwords("spanish"), latin_stopwords$a, extra_stopwords), selection = "remove", valuetype = "fixed")
temp_dfm <- dfm_select(temp_dfm, pattern = c("\\d\\d\\d\\d\\d", "\\d\\d\\d\\d", "\\d\\d\\d", "\\d\\d", "\\d"), selection = "remove", valuetype = "regex")
temp_dir <- paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/")
temp_files <- list.files(temp_dir, full.names = TRUE)
actors <- readRDS(paste0(temp_dir, "actors.rds"))
temp_files <- temp_files[-(grep("actor", temp_files))]
for(i_com in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com])
#check which com it may be
for(i_com_check in 1:length(unique(temp_dfm@docvars$Community)))
if(all(temp_dfm@docvars$estc_id[which(temp_dfm@docvars$Community == paste0("Community_", i_com_check))] %in% temp_com$estc_ids)) {
#assign(paste0("com_", era, "_", i_com_check), temp_com)
cat("\nExtracted data com", i_com, "is", i_com_check, "in DFM")
}
}
temp_files
str_extract("comm_\\d", temp_files[i_com])
str_extract("comm_//d", temp_files[i_com])
temp_files[i_com]
str_extract("comm_\\d", temp_files[i_com])
temp_files[i_com]
str_extract("comm_", temp_files[i_com])
?str_extract
gsub(paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "//", "", temp_files[i_com])
)
gsub(paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "//"), "", temp_files[i_com])
current_com <- gsub(".rds", "", current_com)
current_com <- gsub(paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "//"), "", temp_files[i_com])
current_com <- gsub(".rds", "", current_com)
current_com
for(i_com in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com])
current_com <- gsub(paste0("../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "//"), "", temp_files[i_com])
current_com <- gsub(".rds", "", current_com)
#check which com it may be
for(i_com_check in 1:length(unique(temp_dfm@docvars$Community)))
if(all(temp_dfm@docvars$estc_id[which(temp_dfm@docvars$Community == paste0("Community_", i_com_check))] %in% temp_com$estc_ids)) {
#assign(paste0("com_", era, "_", i_com_check), temp_com)
cat("\nExtracted data com", current_com, "is", i_com_check, "in DFM")
}
}
setwd("code/work/")
options(stringsAsFactors = FALSE)
'%!in%' <- function(x,y)!('%in%'(x,y))
#more than plots - get sankey data.
library(quanteda)
library(stringr)
latin_stopwords <- read.csv("../../data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
extra_stopwords <- c("shall", "may", "one", "us", "hath", "yet", "upon", "yet", "now", "said", "unto", "thy", "doe", "first", "must",
"much", "made", "many", "make", "also", "without", "can", "thou", "like", "can", "though", "therefore", "without",
"two", "things", "might", "way", "say", "day", "let", "well", "things", "take", "owne", "doth", "i.e", "tis", "page removed",
#THIS IS IMPORTANT!
"non-latin", "alphabet", "saith", "thus", "|", "¦", "vol", "year", "printed", "published")
setwd("code/work/")
options(stringsAsFactors = FALSE)
'%!in%' <- function(x,y)!('%in%'(x,y))
getwd()
getwd()
getwd()
options(stringsAsFactors = FALSE)
'%!in%' <- function(x,y)!('%in%'(x,y))
library(quanteda)
library(stringr)
library(ggplot2)
#stop words
latin_stopwords <- read.csv("../../ESTC_SNA_data_creation/data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
extra_stopwords <- c("shall", "may", "one", "us", "hath", "yet", "upon", "yet", "now", "said", "unto", "thy", "doe", "first", "must",
"much", "made", "many", "make", "also", "without", "can", "thou", "like", "can", "though", "therefore", "without",
"two", "things", "might", "way", "say", "day", "let", "well", "things", "take", "owne", "doth", "i.e", "tis", "page removed",
#THIS IS IMPORTANT!
"non-latin", "alphabet", "saith", "thus", "|", "¦", "⁻", "vol", "year", "printed", "published",
"na", "amp", "ye", "anno", "translated", "vpon", "vnto", "yeere", "haue", "three", "second", "thereof", "yeare", "written", "mr",
"wherein", "written", "esq", "author", "part", "dr", "volumes", "1800", "volume", "mrs", "m.d", "d.d", "b.d")
#Get keyness per era, export png of each community
total_dfm <- readRDS("../../ESTC_SNA_data_creation/data/work/netowrking_archives/total_era_dfm.rds")
total_dfm <- dfm_select(total_dfm, pattern = c(stopwords("english"), stopwords("french"), stopwords("italian"), stopwords("spanish"), latin_stopwords$a, extra_stopwords), selection = "remove", valuetype = "fixed")
total_dfm <- dfm_select(total_dfm, pattern = c("\\d\\d\\d\\d\\d", "\\d\\d\\d\\d", "\\d\\d\\d", "\\d\\d", "\\d"), selection = "remove", valuetype = "regex")
eras <- unique(total_dfm@docvars$Era)
setwd("code/")
library(stringr)
library(neo4r)
library(igraph)
library(ggplot2)
library(ggalluvial)
library(dplyr)
library(purrr)
library(igraph)
library(stringr)
library(RColorBrewer)
library(neo4r)
library(ggplot2)
library(ggalluvial)
library(tibble)
library(PGRdup)
library(quanteda)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = "1234"
)
latin_stopwords <- read.csv("../../ESTC_SNA_data_creation/data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
extra_stopwords <- c("shall", "may", "one", "us", "hath", "yet", "upon", "yet", "now", "said", "unto", "thy", "doe", "first", "must",
"much", "made", "many", "make", "also", "without", "can", "thou", "like", "can", "though", "therefore", "without",
"two", "things", "might", "way", "say", "day", "let", "well", "things", "take", "owne", "doth", "i.e", "tis", "page removed",
#THIS IS IMPORTANT!
"non-latin", "alphabet", "saith", "thus", "|", "¦", "⁻", "vol", "year", "printed", "published",
"na", "amp", "ye", "anno", "translated", "vpon", "vnto", "yeere", "haue", "three", "second", "thereof", "yeare", "written", "mr",
"wherein", "written", "esq", "author", "part", "dr", "volumes", "1800", "volume", "mrs", "m.d", "d.d", "b.d")
era <- "1646-1655"
era <- "1646-1655"
comms <- c(9,1,10,12)
temp_dir <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/")
temp_files <- list.files(temp_dir, full.names = TRUE)
actors <- readRDS(paste0(temp_dir, "actors.rds"))
actors <- actors[which(actors$community %in% comms),]
temp_files <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/comm_", comms, ".rds")
View(actors)
comms <- c(2,9,1,10,12)
temp_dir <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/")
temp_files <- list.files(temp_dir, full.names = TRUE)
actors <- readRDS(paste0(temp_dir, "actors.rds"))
actors <- actors[which(actors$community %in% comms),]
temp_files <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/comm_", comms, ".rds")
View(actors)
i<-1
temp_comm <- readRDS(temp_files[i])
assign(paste0("comm_", comms[i]), temp_comm)
temp_estcs <- temp_comm$estc_ids
temp_estcs_filepath <- paste0("../../eebo_ecco_full_text/", temp_estcs, ".txt")
temp_estcs <- temp_estcs[which(file.exists(temp_estcs_filepath) == TRUE)]
temp_estcs_filepath <- temp_estcs_filepath[which(file.exists(temp_estcs_filepath) == TRUE)]
#build corpora
temp_df <- temp_comm[,-c(4)]
temp_df$text <- paste0(temp_df$title_1, temp_df$title_2, sep = " ")
View(temp_df)
duplicated(temp_df$work_id)
which(duplicated(temp_df$work_id))
temp_df$ft <- FALSE
temp_df$ft[which(temp_df$estc_ids %in% temp_estcs)] <- TRUE
View(temp_df)
temp_work_ids <- unique(temp_df$work_id)
i_work_check <- 1
which(temp_df$work_id == temp_work_ids[i_work_check])
temp_work_ids[i_work_check]
temp_work_ids <- temp_df$work_id[unique(temp_df$work_id)]
unique(temp_df$work_id)
temp_work_ids <- unique(temp_df$work_id)
temp_work_ids[i_work_check]
temp_work_ids[2]
if(is.na(temp_work_ids[i_work_check]))
(is.na(temp_work_ids[i_work_check]))
i_work_check<-2
which(temp_df$work_id == temp_work_ids[i_work_check])
which(temp_df$ft[temp_locs] == TRUE)
temp_locs <- which(temp_df$work_id == temp_work_ids[i_work_check])
which(temp_df$ft[temp_locs] == TRUE)
temp_ft_locs <- locs[which(temp_df$ft[temp_locs] == TRUE)]
temp_ft_locs <- temp_locs[which(temp_df$ft[temp_locs] == TRUE)]
temp_ft_locs
nchar(temp_df$text[temp_locs])
which.max(nchar(temp_df$text[temp_locs]))
temp_locs[which.max(nchar(temp_df$text[temp_locs]))]
temp_locs[-which.max(nchar(temp_df$text[temp_locs]))]
temp_locs[-(which.max(nchar(temp_df$text[temp_locs])))]
temp_df <- temp_df[-c(temp_locs[-(which.max(nchar(temp_df$text[temp_locs])))]),]
i_work_check<-3
temp_locs <- which(temp_df$work_id == temp_work_ids[i_work_check])
temp_locs
temp_ft_locs <- temp_locs[which(temp_df$ft[temp_locs] == TRUE)]
temp_ft_locs
i_work_check<-4
temp_locs <- which(temp_df$work_id == temp_work_ids[i_work_check])
temp_locs
duplicated(temp_df$work_id)
which(duplicated(temp_df$work_id))
temp_work_ids <- temp_df$work_ids[which(duplicated(temp_df$work_id))]
union(temp_work_ids)
which(duplicated(temp_df$work_id))
#build corpora
temp_df <- temp_comm[,-c(4)]
temp_df$ft <- FALSE
temp_df$ft[which(temp_df$estc_ids %in% temp_estcs)] <- TRUE
which(duplicated(temp_df$work_id))
temp_work_ids <- temp_df$work_ids[which(duplicated(temp_df$work_id))]
temp_work_ids <- temp_df$work_id[which(duplicated(temp_df$work_id))]
temp_work_ids <- unique(temp_work_ids)
temp_work_ids <- temp_work_ids[-is.na(temp_work_ids)]
i_work_check<-1
temp_locs <- which(temp_df$work_id == temp_work_ids[i_work_check])
temp_locs
temp_ft_locs <- temp_locs[which(temp_df$ft[temp_locs] == TRUE)]
temp_ft_locs
temp_locs
temp_ft_locs <- temp_locs[which(temp_df$ft[temp_locs] == TRUE)]
length(temp_ft_locs) == 0
temp_locs <- temp_locs[-c(temp_ft_locs)]
temp_locs
temp_locs <- temp_locs[-c(temp_ft_locs[1])]
temp_locs
temp_locs[-c(temp_ft_locs[1])]
temp_locs[-c(temp_ft_locs[2])]
temp_locs[-c(which(temp_locs == temp_ft_locs[1]))]
temp_locs <- temp_locs[-c(which(temp_locs == temp_ft_locs[1]))]
temp_df <- temp_df[-c(temp_locs[-(which.max(nchar(temp_df$text[temp_locs])))]),]
#build corpora
temp_df <- temp_comm[,-c(4)]
temp_df$ft <- FALSE
temp_df$ft[which(temp_df$estc_ids %in% temp_estcs)] <- TRUE
temp_work_ids <- temp_df$work_ids[which(duplicated(temp_df$work_id))]
temp_work_ids <- unique(temp_work_ids)
temp_work_ids <- temp_work_ids[-is.na(temp_work_ids)]
#build corpora
temp_df <- temp_comm[,-c(4)]
temp_df$ft <- FALSE
