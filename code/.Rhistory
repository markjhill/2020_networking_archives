com_hits <- c(com_hits, temp_files[i_com_check])
}
}
work_to_check <- "43-eikon basilike"
com_hits <- c()
for (i_era_check in 1:(length(era)-2)) {
cat("\r", era[i_era_check])
temp_files <- list.files(paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era[i_era_check], "-", era[(i_era_check+2)]-1, "/"), full.names = TRUE)
temp_files <- temp_files[-c(grep("actors", temp_files))]
for(i_com_check in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com_check])
match <- which(temp_com$work_id == work_to_check)
if(length(match) == 0) { next }
cat("\nHit!", temp_files[i_com_check], "\n")
com_hits <- c(com_hits, temp_files[i_com_check])
}
}
work_to_check <- "4425-eikonoklastes in answer to book intitld eikon basilike portrature of his sacred majesty in his solitudes and sufferings"
com_hits <- c()
for (i_era_check in 1:(length(era)-2)) {
cat("\r", era[i_era_check])
temp_files <- list.files(paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era[i_era_check], "-", era[(i_era_check+2)]-1, "/"), full.names = TRUE)
temp_files <- temp_files[-c(grep("actors", temp_files))]
for(i_com_check in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com_check])
match <- which(temp_com$work_id == work_to_check)
if(length(match) == 0) { next }
cat("\nHit!", temp_files[i_com_check], "\n")
com_hits <- c(com_hits, temp_files[i_com_check])
}
}
work_to_check <- "43-eikon basilike"
com_hits <- c()
for (i_era_check in 1:(length(era)-2)) {
cat("\r", era[i_era_check])
temp_files <- list.files(paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era[i_era_check], "-", era[(i_era_check+2)]-1, "/"), full.names = TRUE)
temp_files <- temp_files[-c(grep("actors", temp_files))]
for(i_com_check in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com_check])
match <- which(temp_com$work_id == work_to_check)
if(length(match) == 0) { next }
cat("\nHit!", temp_files[i_com_check], "\n")
com_hits <- c(com_hits, temp_files[i_com_check])
}
}
work_to_check <- "43-eikon basilike"
com_hits <- c()
for (i_era_check in 1:(length(era)-2)) {
cat("\r", era[i_era_check])
temp_files <- list.files(paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era[i_era_check], "-", era[(i_era_check+2)]-1, "/"), full.names = TRUE)
temp_files <- temp_files[-c(grep("actors", temp_files))]
for(i_com_check in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com_check])
match <- which(temp_com$work_id == work_to_check)
if(length(match) == 0) { next }
cat("\nHit!", temp_files[i_com_check], "\n")
com_hits <- c(com_hits, temp_files[i_com_check])
}
}
com_hits
com_hits <- c()
for (i_era_check in 1:(length(era)-2)) {
cat("\r", era[i_era_check])
temp_files <- list.files(paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era[i_era_check], "-", era[(i_era_check+2)]-1, "/"), full.names = TRUE)
temp_files <- temp_files[-c(grep("actors", temp_files))]
for(i_com_check in 1:length(temp_files)) {
temp_com <- readRDS(temp_files[i_com_check])
match <- which(temp_com$work_id == work_to_check)
if(length(match) == 0) { next }
cat("\nHit!", temp_files[i_com_check], "\n")
com_hits <- c(com_hits, temp_files[i_com_check])
}
}
com_hits
library(stringr)
library(neo4r)
library(igraph)
library(ggplot2)
library(ggalluvial)
library(dplyr)
library(purrr)
library(igraph)
library(RColorBrewer)
library(neo4r)
library(ggplot2)
library(ggalluvial)
library(tibble)
library(PGRdup)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = "1234"
)
era <- "1641-1650"
latin_stopwords <- read.csv("../../ESTC_SNA_data_creation/data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
extra_stopwords <- c("shall", "may", "one", "us", "hath", "yet", "upon", "yet", "now", "said", "unto", "thy", "doe", "first", "must",
"much", "made", "many", "make", "also", "without", "can", "thou", "like", "can", "though", "therefore", "without",
"two", "things", "might", "way", "say", "day", "let", "well", "things", "take", "owne", "doth", "i.e", "tis", "page removed",
#THIS IS IMPORTANT!
"non-latin", "alphabet", "saith", "thus", "|", "¦", "⁻", "vol", "year", "printed", "published",
"na", "amp", "ye", "anno", "translated", "vpon", "vnto", "yeere", "haue", "three", "second", "thereof", "yeare", "written", "mr",
"wherein", "written", "esq", "author", "part", "dr", "volumes", "1800", "volume", "mrs", "m.d", "d.d", "b.d")
temp_dfm <- readRDS(paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/com_dfm_titles/com_dfm_", era, ".rds"))
temp_dfm <- dfm_select(temp_dfm, pattern = c(stopwords("english"), stopwords("french"), stopwords("italian"), stopwords("spanish"), latin_stopwords$a, extra_stopwords), selection = "remove", valuetype = "fixed")
temp_dfm <- dfm_select(temp_dfm, pattern = c("\\d\\d\\d\\d\\d", "\\d\\d\\d\\d", "\\d\\d\\d", "\\d\\d", "\\d"), selection = "remove", valuetype = "regex")
temp_dir <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/")
temp_files <- list.files(temp_dir, full.names = TRUE)
actors <- readRDS(paste0(temp_dir, "actors.rds"))
temp_files <- temp_files[-(grep("actor", temp_files))]
View(actors)
temp_actors <- paste0(actors$actor_id[which(actors$community == "5")], collapse = '", "')
#temp_estc <- com_1641-`com_1641-1650_2`
start_year <- str_extract(era, "^\\d\\d\\d\\d")
end_year <- str_extract(era, "\\d\\d\\d\\d$")
cat(paste0('MATCH (a1:Actor)-[]-(d:Document)-[]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city CONTAINS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a1, a2, d'))
g <- paste0('MATCH (a1:Actor)-[rel1]-(d:Document)-[rel2]-(a2:Actor)
WHERE a1.actor_id IN ["', temp_actors, '"] AND a2.actor_id IN ["', temp_actors, '"] AND d.pub_city CONTAINS "London" AND d.pub_year IN range(', start_year, ',', end_year, ')
RETURN a1, a2, d, rel1, rel2') %>%
call_neo4j(con, type = "graph")
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
get_igraph_from_neo4j <- function(G) {
#remove mutil-birth/death years and collapse arrays
nodes <- length(G$nodes$properties)
for (i_node in 1:nodes) {
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")])[[1]]
to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
if(length(to_collapse) == 0) { next }
G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
}
# #collapse arrays
# nodes <- length(G$nodes$properties)
# for (i_node in 1:nodes) {
#   to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
#   if(length(to_collapse) == 0) { next }
#   G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
# }
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties") %>%
# We're extracting the first label of each node, but
# this column can also be removed if not needed
mutate(label = map_chr(label, 1))
#G$nodes$label <- ifelse(is.na(G$nodes$name), str_trunc(G$nodes$title, 20, "right"), str_trunc(G$nodes$name, 20, "right"))
G$relationships <- G$relationships %>%
unnest_relationships() %>%
dplyr::select(startNode, endNode, type, everything())
graph_object <- igraph::graph_from_data_frame(
d = G$relationships,
directed = TRUE,
vertices = G$nodes
)
#Lables and colours
V(graph_object)$color[which(V(graph_object)$label == "Actor")] <- "yellow"
V(graph_object)$type[which(V(graph_object)$label == "Actor")] <- "Actor"
V(graph_object)$label[which(V(graph_object)$label == "Actor")] <- names(V(graph_object)[which(V(graph_object)$label == "Actor")])
V(graph_object)$color[which(V(graph_object)$label == "Document")] <- "green"
V(graph_object)$type[which(V(graph_object)$label == "Document")] <- "Document"
V(graph_object)$label[which(V(graph_object)$label == "Document")] <- stringr::str_trunc(V(graph_object)$title[which(V(graph_object)$label == "Document")], 20)
V(graph_object)$color[which(V(graph_object)$label == "Work")] <- "orange"
V(graph_object)$type[which(V(graph_object)$label == "Work")] <- "Work"
V(graph_object)$label[which(V(graph_object)$label == "Work")] <- stringr::str_trunc(V(graph_object)$work_id[which(V(graph_object)$label == "Work")], 20)
return(graph_object)
}
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
plot.igraph(gg, vertex.size = .5, vertex.label = NA, label.cex = 0)
V(gg)
plot.igraph(gg, vertex.size = .9, vertex.label = NA, label.cex = 0)
plot.igraph(gg, vertex.size = 1, vertex.label = NA, label.cex = 0)
V(gg)[699]
V(gg)[400]
V(gg)$title
V(graph_object)$label[which(V(graph_object)$label == "Document")] <- stringr::str_trunc(V(graph_object)$estc_id[which(V(graph_object)$label == "Document")], 20)
get_igraph_from_neo4j <- function(G) {
#remove mutil-birth/death years and collapse arrays
nodes <- length(G$nodes$properties)
for (i_node in 1:nodes) {
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_birth")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_death")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "tagged_corp")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_last_estc")])[[1]]
G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")] <-
unlist(G$nodes$properties[[i_node]][which(names(G$nodes$properties[[i_node]]) == "year_active_first_estc")])[[1]]
to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
if(length(to_collapse) == 0) { next }
G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
}
# #collapse arrays
# nodes <- length(G$nodes$properties)
# for (i_node in 1:nodes) {
#   to_collapse <- which(lapply(G$nodes$properties[[i_node]], length) > 1)
#   if(length(to_collapse) == 0) { next }
#   G$nodes$properties[[i_node]][to_collapse] <- lapply(G$nodes$properties[[i_node]][to_collapse], paste0, collapse = ", ")
# }
G$nodes <- G$nodes %>%
unnest_nodes(what = "properties") %>%
# We're extracting the first label of each node, but
# this column can also be removed if not needed
mutate(label = map_chr(label, 1))
#G$nodes$label <- ifelse(is.na(G$nodes$name), str_trunc(G$nodes$title, 20, "right"), str_trunc(G$nodes$name, 20, "right"))
G$relationships <- G$relationships %>%
unnest_relationships() %>%
dplyr::select(startNode, endNode, type, everything())
graph_object <- igraph::graph_from_data_frame(
d = G$relationships,
directed = TRUE,
vertices = G$nodes
)
#Lables and colours
V(graph_object)$color[which(V(graph_object)$label == "Actor")] <- "yellow"
V(graph_object)$type[which(V(graph_object)$label == "Actor")] <- "Actor"
V(graph_object)$label[which(V(graph_object)$label == "Actor")] <- names(V(graph_object)[which(V(graph_object)$label == "Actor")])
V(graph_object)$color[which(V(graph_object)$label == "Document")] <- "green"
V(graph_object)$type[which(V(graph_object)$label == "Document")] <- "Document"
V(graph_object)$label[which(V(graph_object)$label == "Document")] <- stringr::str_trunc(V(graph_object)$estc_id[which(V(graph_object)$label == "Document")], 20)
V(graph_object)$color[which(V(graph_object)$label == "Work")] <- "orange"
V(graph_object)$type[which(V(graph_object)$label == "Work")] <- "Work"
V(graph_object)$label[which(V(graph_object)$label == "Work")] <- stringr::str_trunc(V(graph_object)$work_id[which(V(graph_object)$label == "Work")], 20)
return(graph_object)
}
gg <- get_igraph_from_neo4j(g) %>%
as.undirected(mode = "each")
V(gg)
V(gg)$estc_id
View(actors)
era
era <- seq(1501, 1800, 5)
era <- c(era, 1801, 1806)
era
i_era_check <- 30
temp_files <- list.files(paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era[i_era_check], "-", era[(i_era_check+2)]-1, "/"), full.names = TRUE)
temp_files <- temp_files[-c(grep("actors", temp_files))]
temp_files <- list.files(paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era[i_era_check], "-", era[(i_era_check+2)]-1, "/"), full.names = TRUE)
temp_files
readRDS(temp_files[1])
temp_csv <- readRDS(temp_files[1])
View(temp_csv)
setwd("code/")
options(stringsAsFactors = FALSE)
'%!in%' <- function(x,y)!('%in%'(x,y))
library(stringr)
library(neo4r)
library(igraph)
library(ggplot2)
library(ggalluvial)
library(dplyr)
library(purrr)
library(igraph)
library(stringr)
library(RColorBrewer)
library(neo4r)
library(ggplot2)
library(ggalluvial)
library(tibble)
library(PGRdup)
library(quanteda)
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "neo4j",
password = "1234"
)
latin_stopwords <- read.csv("../../ESTC_SNA_data_creation/data/raw/latin.stopwords.clean", stringsAsFactors = FALSE)
extra_stopwords <- c("shall", "may", "one", "us", "hath", "yet", "upon", "yet", "now", "said", "unto", "thy", "doe", "first", "must",
"much", "made", "many", "make", "also", "without", "can", "thou", "like", "can", "though", "therefore", "without",
"two", "things", "might", "way", "say", "day", "let", "well", "things", "take", "owne", "doth", "i.e", "tis", "page removed",
#THIS IS IMPORTANT!
"non-latin", "alphabet", "saith", "thus", "|", "¦", "⁻", "vol", "year", "printed", "published",
"na", "amp", "ye", "anno", "translated", "vpon", "vnto", "yeere", "haue", "three", "second", "thereof", "yeare", "written", "mr",
"wherein", "written", "esq", "author", "part", "dr", "volumes", "1800", "volume", "mrs", "m.d", "d.d", "b.d", "▪")
era <- "1651-1660"
comms <- c(1,2,9)
temp_dir <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/")
temp_files <- list.files(temp_dir, full.names = TRUE)
actors <- readRDS(paste0(temp_dir, "actors.rds"))
actors <- actors[which(actors$community %in% comms),]
temp_files <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/comm_", comms, ".rds")
for(i in 1:length(temp_files)) {
cat("\nCommunity:", i, "\n")
temp_file_name <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/full_text_comms/dfm_", era, "_", comms[i], ".rds")
temp_comm <- readRDS(temp_files[i])
assign(paste0("comm_", era, "_", comms[i]), temp_comm)
if(file.exists(temp_file_name)) {
temp_dfm <- readRDS(temp_file_name)
assign(paste0("dfm_", era, "_", comms[i]), temp_dfm)
cat("\nDFM exists, skippig to next\n")
next
}
temp_estcs <- temp_comm$estc_ids
temp_estcs_filepath <- paste0("../../eebo_ecco_full_text/", temp_estcs, ".txt")
temp_estcs <- temp_estcs[which(file.exists(temp_estcs_filepath) == TRUE)]
temp_estcs_filepath <- temp_estcs_filepath[which(file.exists(temp_estcs_filepath) == TRUE)]
#build corpora
temp_df <- temp_comm[,-c(4)]
temp_df$text <- paste0(temp_df$title_1, temp_df$title_2, sep = " ")
temp_df$ft <- FALSE
temp_df$ft[which(temp_df$estc_ids %in% temp_estcs)] <- TRUE
temp_work_ids <- temp_df$work_id[which(duplicated(temp_df$work_id))]
temp_work_ids <- unique(temp_work_ids)
if(any(is.na(temp_work_ids))) {
temp_work_ids <- temp_work_ids[-c(which(is.na(temp_work_ids)))]
}
for(i_work_check in 1:length(temp_work_ids)) {
#for(i_work_check in 1:6) {
cat("\r", i_work_check)
temp_locs <- which(temp_df$work_id == temp_work_ids[i_work_check])
temp_ft_locs <- temp_locs[which(temp_df$ft[temp_locs] == TRUE)]
if(length(temp_ft_locs) == 0) {
temp_df <- temp_df[-c(temp_locs[-(which.max(nchar(temp_df$text[temp_locs])))]),]
} else {
temp_locs <- temp_locs[-c(which(temp_locs == temp_ft_locs[1]))]
temp_df <- temp_df[-c(temp_locs),]
}
if(nrow(temp_df) == 0) {
cat("ERROR", i_work_check)
break
}
}
if(length(which(temp_estcs %!in% temp_df$estc_ids)) > 0) {
to_remove <- which(temp_estcs %!in% temp_df$estc_ids)
temp_estcs <- temp_estcs[-c(to_remove)]
temp_estcs_filepath <- temp_estcs_filepath[-c(to_remove)]
}
for(i_full_text in 1:length(temp_estcs)) {
cat("\r", i_full_text)
temp_df$text[which(temp_df$estc_ids == temp_estcs[i_full_text])] <- readr::read_file(temp_estcs_filepath[i_full_text])
}
temp_corp <- corpus(temp_df, docid_field = "estc_ids", text_field = "text")
temp_dfm <- dfm(temp_corp, verbose = TRUE, remove_punct = TRUE)
temp_dfm <- dfm_select(temp_dfm, pattern = c(stopwords("english"), stopwords("french"), stopwords("italian"), stopwords("spanish"), latin_stopwords$a, extra_stopwords), selection = "remove", valuetype = "fixed")
temp_dfm <- dfm_select(temp_dfm, pattern = c("\\d\\d\\d\\d\\d", "\\d\\d\\d\\d", "\\d\\d\\d", "\\d\\d", "\\d"), selection = "remove", valuetype = "regex")
temp_dfm <- dfm_trim(temp_dfm, min_termfreq = 10, min_docfreq = 2)
saveRDS(temp_dfm, file = temp_file_name)
assign(paste0("dfm_", era, "_", comms[i]), temp_dfm)
rm(temp_df)
rm(temp_dfm)
rm(temp_comm)
rm(temp_corp)
rm(temp_estcs)
rm(temp_estcs_filepath)
gc()
}
getwd()
cat("\nCommunity:", i, "\n")
temp_file_name <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/full_text_comms/dfm_", era, "_", comms[i], ".rds")
temp_comm <- readRDS(temp_files[i])
assign(paste0("comm_", era, "_", comms[i]), temp_comm)
if(file.exists(temp_file_name)) {
temp_dfm <- readRDS(temp_file_name)
assign(paste0("dfm_", era, "_", comms[i]), temp_dfm)
cat("\nDFM exists, skippig to next\n")
next
}
temp_estcs <- temp_comm$estc_ids
temp_estcs_filepath <- paste0("../../eebo_ecco_full_text/", temp_estcs, ".txt")
temp_estcs <- temp_estcs[which(file.exists(temp_estcs_filepath) == TRUE)]
temp_estcs_filepath <- temp_estcs_filepath[which(file.exists(temp_estcs_filepath) == TRUE)]
#build corpora
temp_df <- temp_comm[,-c(4)]
temp_df$text <- paste0(temp_df$title_1, temp_df$title_2, sep = " ")
temp_df$ft <- FALSE
temp_df$ft[which(temp_df$estc_ids %in% temp_estcs)] <- TRUE
temp_work_ids <- temp_df$work_id[which(duplicated(temp_df$work_id))]
temp_work_ids <- unique(temp_work_ids)
if(any(is.na(temp_work_ids))) {
temp_work_ids <- temp_work_ids[-c(which(is.na(temp_work_ids)))]
}
for(i_work_check in 1:length(temp_work_ids)) {
#for(i_work_check in 1:6) {
cat("\r", i_work_check)
temp_locs <- which(temp_df$work_id == temp_work_ids[i_work_check])
temp_ft_locs <- temp_locs[which(temp_df$ft[temp_locs] == TRUE)]
if(length(temp_ft_locs) == 0) {
temp_df <- temp_df[-c(temp_locs[-(which.max(nchar(temp_df$text[temp_locs])))]),]
} else {
temp_locs <- temp_locs[-c(which(temp_locs == temp_ft_locs[1]))]
temp_df <- temp_df[-c(temp_locs),]
}
if(nrow(temp_df) == 0) {
cat("ERROR", i_work_check)
break
}
}
era <- "1651-1660"
comms <- c(1,10,12,5)
temp_dir <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/")
temp_dir
temp_dir <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/")
temp_files <- list.files(temp_dir, full.names = TRUE)
actors <- readRDS(paste0(temp_dir, "actors.rds"))
actors <- actors[which(actors$community %in% comms),]
temp_files <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/community_data/", era, "/comm_", comms, ".rds")
for(i in 1:length(temp_files)) {
cat("\nCommunity:", i, "\n")
temp_file_name <- paste0("../../ESTC_SNA_data_creation/data/work/netowrking_archives/full_text_comms/dfm_", era, "_", comms[i], ".rds")
temp_comm <- readRDS(temp_files[i])
assign(paste0("comm_", era, "_", comms[i]), temp_comm)
if(file.exists(temp_file_name)) {
temp_dfm <- readRDS(temp_file_name)
assign(paste0("dfm_", era, "_", comms[i]), temp_dfm)
cat("\nDFM exists, skippig to next\n")
next
}
temp_estcs <- temp_comm$estc_ids
temp_estcs_filepath <- paste0("../../eebo_ecco_full_text/", temp_estcs, ".txt")
temp_estcs <- temp_estcs[which(file.exists(temp_estcs_filepath) == TRUE)]
temp_estcs_filepath <- temp_estcs_filepath[which(file.exists(temp_estcs_filepath) == TRUE)]
#build corpora
temp_df <- temp_comm[,-c(4)]
temp_df$text <- paste0(temp_df$title_1, temp_df$title_2, sep = " ")
temp_df$ft <- FALSE
temp_df$ft[which(temp_df$estc_ids %in% temp_estcs)] <- TRUE
temp_work_ids <- temp_df$work_id[which(duplicated(temp_df$work_id))]
temp_work_ids <- unique(temp_work_ids)
if(any(is.na(temp_work_ids))) {
temp_work_ids <- temp_work_ids[-c(which(is.na(temp_work_ids)))]
}
for(i_work_check in 1:length(temp_work_ids)) {
#for(i_work_check in 1:6) {
cat("\r", i_work_check)
temp_locs <- which(temp_df$work_id == temp_work_ids[i_work_check])
temp_ft_locs <- temp_locs[which(temp_df$ft[temp_locs] == TRUE)]
if(length(temp_ft_locs) == 0) {
temp_df <- temp_df[-c(temp_locs[-(which.max(nchar(temp_df$text[temp_locs])))]),]
} else {
temp_locs <- temp_locs[-c(which(temp_locs == temp_ft_locs[1]))]
temp_df <- temp_df[-c(temp_locs),]
}
if(nrow(temp_df) == 0) {
cat("ERROR", i_work_check)
break
}
}
if(length(which(temp_estcs %!in% temp_df$estc_ids)) > 0) {
to_remove <- which(temp_estcs %!in% temp_df$estc_ids)
temp_estcs <- temp_estcs[-c(to_remove)]
temp_estcs_filepath <- temp_estcs_filepath[-c(to_remove)]
}
for(i_full_text in 1:length(temp_estcs)) {
cat("\r", i_full_text)
temp_df$text[which(temp_df$estc_ids == temp_estcs[i_full_text])] <- readr::read_file(temp_estcs_filepath[i_full_text])
}
temp_corp <- corpus(temp_df, docid_field = "estc_ids", text_field = "text")
temp_dfm <- dfm(temp_corp, verbose = TRUE, remove_punct = TRUE)
temp_dfm <- dfm_select(temp_dfm, pattern = c(stopwords("english"), stopwords("french"), stopwords("italian"), stopwords("spanish"), latin_stopwords$a, extra_stopwords), selection = "remove", valuetype = "fixed")
temp_dfm <- dfm_select(temp_dfm, pattern = c("\\d\\d\\d\\d\\d", "\\d\\d\\d\\d", "\\d\\d\\d", "\\d\\d", "\\d"), selection = "remove", valuetype = "regex")
temp_dfm <- dfm_trim(temp_dfm, min_termfreq = 10, min_docfreq = 2)
saveRDS(temp_dfm, file = temp_file_name)
assign(paste0("dfm_", era, "_", comms[i]), temp_dfm)
rm(temp_df)
rm(temp_dfm)
rm(temp_comm)
rm(temp_corp)
rm(temp_estcs)
rm(temp_estcs_filepath)
gc()
}
topfeatures(`dfm_1646-1655_1`, n =25)
topfeatures(`dfm_1646-1655_1`, n =25)
keywords <- c("quakers")
era <- "1651-1660"
#comms <- c(2,9,1,10,12)
comms <- c(1,10,12,5)
keywords <- c("evil")
#for(i in 1:length(temp_files)) {
for(i in c(1,4)) {
temp_dfm <- get(paste0("dfm_", era, "_", comms[i]))
temp_dfm[, c(keywords)]
tstat_temp <- textstat_simil(temp_dfm,  temp_dfm[, c(keywords)], method = "cosine", margin = "features")
print(paste0("dfm_", era, "_", comms[i]))
print(as.list(tstat_temp, n = 20))
rm(temp_dfm)
rm(tstat_temp)
}
keywords <- c("god")
#for(i in 1:length(temp_files)) {
for(i in c(1,4)) {
temp_dfm <- get(paste0("dfm_", era, "_", comms[i]))
temp_dfm[, c(keywords)]
tstat_temp <- textstat_simil(temp_dfm,  temp_dfm[, c(keywords)], method = "cosine", margin = "features")
print(paste0("dfm_", era, "_", comms[i]))
print(as.list(tstat_temp, n = 20))
rm(temp_dfm)
rm(tstat_temp)
}
write.csv(`comm_1651-1660_1`, file = "../outputs_for_presentation/1651-1660_1.csv")
write.csv(`comm_1651-1660_5`, file = "../outputs_for_presentation/1651-1660_5.csv")
keywords <- c("money")
#for(i in 1:length(temp_files)) {
for(i in c(1,4)) {
temp_dfm <- get(paste0("dfm_", era, "_", comms[i]))
temp_dfm[, c(keywords)]
tstat_temp <- textstat_simil(temp_dfm,  temp_dfm[, c(keywords)], method = "cosine", margin = "features")
print(paste0("dfm_", era, "_", comms[i]))
print(as.list(tstat_temp, n = 20))
rm(temp_dfm)
rm(tstat_temp)
}
